#!/usr/bin/python
from pcapfile import savefile
import binascii
import struct
import sys

capfile = savefile.load_savefile(sys.stdin, verbose=False)

m2sbuffer = ""
lastframe = None
frameno = 0

for packet in capfile.packets:
	raw = packet.raw()

	frameno = frameno + 1

	# This is a flag the nordic RF sniffer puts in the pcap packet.  Has information on the environment.
	nordicflags = struct.unpack('B', raw[8])[0]

	direction = None
	# Third bit of the nordic flags set the direction, 0010 for master to slave, 0000 for slave to master.
	if not nordicflags & 0x02:
		continue

	# Ensure this is a Attribute Protocol (0x0004) message.
	l2capcid = struct.unpack('H', raw[25:27])[0]
	if l2capcid != 0x0004:
		continue

	# Skip messages with invalid CRCs.
	if not nordicflags & 0x01:
		sys.stderr.write("Frame {0} failed CRC check.\n".format(frameno))
		continue

	# We're assuming all packets are ATT type packets since we filtered those out in wireshark.  (we did, didn't we?)
	btattpayload = raw[27:]

	# First bit of the ATT payload is the opcode.
	btattopcode = btattpayload[0]
	opcode = struct.unpack('B', btattopcode)[0]

	# At the moment we're only interested in "Write Request" (0x12).
	if not opcode in [0x12]:
		continue

	# Second bit, assuming we have an opcode that supports it, is the "handle".
	btatthandle = btattpayload[1:3]
	handle = struct.unpack('H', btatthandle)[0]

	if not handle in [0x001f]:
		continue

	# Finally we have data, minus three checksum bytes on the end.
	# We're skipping the BTATT opcode and handle (three bytes total)
	btattdata = btattpayload[3:-3]

	# Detect duplicate frames, poorly.
	if btattdata == lastframe:
		sys.stderr.write("Frame {0} is dupe: {1}\n".format(frameno, binascii.hexlify(btattdata)))
		continue

	lastframe = btattdata

	# Detect the magic goTenna preamble.
	if btattdata[0:2] == "\x10\x02":
		# Start of message
		m2sbuffer = btattdata
	else:
		# Continuation of message
		m2sbuffer = m2sbuffer + btattdata

	# Detect the magic goTenna postamble.
	# Smallest unfragmented packet is 0x1002TTSSCCCC1003 = 8 bytes
	if len(m2sbuffer) >= 8 and m2sbuffer[-2:] == "\x10\x03":
		# Unescape any 0x10s.
		m2sbuffer = m2sbuffer.replace("\x10\x10", "\x10")

		# And pull of this message's identifier (operation)
		goopcode = struct.unpack('B', m2sbuffer[2])[0]

		# We're only interested in 0x09 blocks, as those contain the firmware.
		if goopcode == 0x09:
			# Skip preamble + id + seq, and hash + postamble
			data = m2sbuffer[4:-4]
			sys.stdout.write(data)

		m2sbuffer = ""
